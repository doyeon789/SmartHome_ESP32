
esp32UARTConnect.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093c  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085e  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e2  00000000  00000000  000013da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000016bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ed  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000119  00000000  00000000  00001b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	1e d0       	rcall	.+60     	; 0xd6 <main>
  9a:	50 c0       	rjmp	.+160    	; 0x13c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <usart0_init>:

#define BAUD 9600
#define MY_UBRR F_CPU/16/BAUD-1  // Baud rate calculation for 9600

void usart0_init(unsigned int UBRR0){
	UBRR0H = (unsigned char)(UBRR0>>8);
  9e:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)UBRR0;
  a2:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
  a4:	88 e1       	ldi	r24, 0x18	; 24
  a6:	8a b9       	out	0x0a, r24	; 10
  a8:	08 95       	ret

000000aa <tx0_ch>:
}

void tx0_ch(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));  // Wait until buffer is empty
  aa:	5d 9b       	sbis	0x0b, 5	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <tx0_ch>
	UDR0 = data;  // Transmit data
  ae:	8c b9       	out	0x0c, r24	; 12
  b0:	08 95       	ret

000000b2 <tx0_str>:
}

void tx0_str(unsigned char *str){
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	ec 01       	movw	r28, r24
	while(*str){  // Send each character of the string until '\0'
  b8:	88 81       	ld	r24, Y
  ba:	88 23       	and	r24, r24
  bc:	29 f0       	breq	.+10     	; 0xc8 <tx0_str+0x16>
  be:	21 96       	adiw	r28, 0x01	; 1
		tx0_ch(*str++);
  c0:	f4 df       	rcall	.-24     	; 0xaa <tx0_ch>
	while(!(UCSR0A & (1<<UDRE0)));  // Wait until buffer is empty
	UDR0 = data;  // Transmit data
}

void tx0_str(unsigned char *str){
	while(*str){  // Send each character of the string until '\0'
  c2:	89 91       	ld	r24, Y+
  c4:	81 11       	cpse	r24, r1
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <tx0_str+0xe>
		tx0_ch(*str++);
	}
}
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <rx0_ch>:

char rx0_ch(){
	while(!(UCSR0A & (1<<RXC0)));  // Wait for data to be received
  ce:	5f 9b       	sbis	0x0b, 7	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <rx0_ch>
	return UDR0;  // Return received character
  d2:	8c b1       	in	r24, 0x0c	; 12
}
  d4:	08 95       	ret

000000d6 <main>:

int main(void) {
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	64 97       	sbiw	r28, 0x14	; 20
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xff;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	8a bb       	out	0x1a, r24	; 26
	
	char str[20] = "";  // Initialize empty string buffer
  ee:	1a 82       	std	Y+2, r1	; 0x02
  f0:	19 82       	std	Y+1, r1	; 0x01
  f2:	fe 01       	movw	r30, r28
  f4:	33 96       	adiw	r30, 0x03	; 3
  f6:	82 e1       	ldi	r24, 0x12	; 18
  f8:	df 01       	movw	r26, r30
  fa:	1d 92       	st	X+, r1
  fc:	8a 95       	dec	r24
  fe:	e9 f7       	brne	.-6      	; 0xfa <main+0x24>
	unsigned char idx = 0;  // Index to track position in the string

	usart0_init(MY_UBRR);  // Initialize UART
 100:	87 e6       	ldi	r24, 0x67	; 103
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	cc df       	rcall	.-104    	; 0x9e <usart0_init>

	while (1) {
		char received = rx0_ch();  // Read received character
 106:	10 e0       	ldi	r17, 0x00	; 0
 108:	e2 df       	rcall	.-60     	; 0xce <rx0_ch>
		if (received != '\0' && idx < 19) {  // Ensure space for '\0'
 10a:	88 23       	and	r24, r24
 10c:	99 f0       	breq	.+38     	; 0x134 <main+0x5e>
 10e:	13 31       	cpi	r17, 0x13	; 19
 110:	88 f4       	brcc	.+34     	; 0x134 <main+0x5e>
			str[idx++] = received;  // Store character
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	91 0f       	add	r25, r17
 116:	e1 e0       	ldi	r30, 0x01	; 1
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	ec 0f       	add	r30, r28
 11c:	fd 1f       	adc	r31, r29
 11e:	e1 0f       	add	r30, r17
 120:	f1 1d       	adc	r31, r1
 122:	80 83       	st	Z, r24
			str[idx] = '\0';  // Null-terminate string
 124:	e1 e0       	ldi	r30, 0x01	; 1
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	ec 0f       	add	r30, r28
 12a:	fd 1f       	adc	r31, r29
 12c:	e9 0f       	add	r30, r25
 12e:	f1 1d       	adc	r31, r1
 130:	10 82       	st	Z, r1
	usart0_init(MY_UBRR);  // Initialize UART

	while (1) {
		char received = rx0_ch();  // Read received character
		if (received != '\0' && idx < 19) {  // Ensure space for '\0'
			str[idx++] = received;  // Store character
 132:	19 2f       	mov	r17, r25
			str[idx] = '\0';  // Null-terminate string
		}
		tx0_str(str);
 134:	ce 01       	movw	r24, r28
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	bc df       	rcall	.-136    	; 0xb2 <tx0_str>
	}
 13a:	e6 cf       	rjmp	.-52     	; 0x108 <main+0x32>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
