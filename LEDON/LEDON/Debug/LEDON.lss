
LEDON.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000874  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a7  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cb  00000000  00000000  00001253  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e4  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008d  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__vector_12>
  32:	00 00       	nop
  34:	58 c0       	rjmp	.+176    	; 0xe6 <__vector_13>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	4c c0       	rjmp	.+152    	; 0xfa <__vector_24>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	3a d0       	rcall	.+116    	; 0x10e <main>
  9a:	4c c0       	rjmp	.+152    	; 0x134 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <timer1_pwm_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

void timer1_pwm_init(){
	DDRB|=(1<<PB5)|(1<<PB6)|(1<<PB7);
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	80 6e       	ori	r24, 0xE0	; 224
  a2:	87 bb       	out	0x17, r24	; 23
	TCCR1A|=(1<<WGM10);
  a4:	8f b5       	in	r24, 0x2f	; 47
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	8f bd       	out	0x2f, r24	; 47
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<COM1C1);
  aa:	8f b5       	in	r24, 0x2f	; 47
  ac:	88 6a       	ori	r24, 0xA8	; 168
  ae:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM12);
  b0:	8e b5       	in	r24, 0x2e	; 46
  b2:	88 60       	ori	r24, 0x08	; 8
  b4:	8e bd       	out	0x2e, r24	; 46
	TCCR1B|=(1<<CS02)|(1<<CS00);
  b6:	8e b5       	in	r24, 0x2e	; 46
  b8:	85 60       	ori	r24, 0x05	; 5
  ba:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<OCIE1A)|(1<<OCIE1B);
  bc:	87 b7       	in	r24, 0x37	; 55
  be:	88 61       	ori	r24, 0x18	; 24
  c0:	87 bf       	out	0x37, r24	; 55
	ETIMSK|=(1<<OCIE1C);
  c2:	ed e7       	ldi	r30, 0x7D	; 125
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24
	TCNT1=0;
  cc:	1d bc       	out	0x2d, r1	; 45
  ce:	1c bc       	out	0x2c, r1	; 44
  d0:	08 95       	ret

000000d2 <__vector_12>:
}

ISR(TIMER1_COMPA_vect){}
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_13>:
ISR(TIMER1_COMPB_vect){}
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_24>:
ISR(TIMER1_COMPC_vect){}
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <main>:
	
int main(void) {
	DDRA = 0xff;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
 112:	87 bb       	out	0x17, r24	; 23
	
	timer1_pwm_init();
 114:	c4 df       	rcall	.-120    	; 0x9e <timer1_pwm_init>

    /* Replace with your application code */
    while (1)  {
		PORTA= 0xff;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	8b bb       	out	0x1b, r24	; 27
		PORTB = (1<<PB0)|(1<<PB1)|(1<<PB2);
 11a:	87 e0       	ldi	r24, 0x07	; 7
 11c:	88 bb       	out	0x18, r24	; 24
		
		OCR1A = 0xff;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	9b bd       	out	0x2b, r25	; 43
 124:	8a bd       	out	0x2a, r24	; 42
		OCR1B = 0xff;
 126:	99 bd       	out	0x29, r25	; 41
 128:	88 bd       	out	0x28, r24	; 40
		OCR1C = 0xff;
 12a:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 12e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 132:	f1 cf       	rjmp	.-30     	; 0x116 <main+0x8>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
