
GatherFunc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000340  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a63  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000897  00000000  00000000  00000ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045f  00000000  00000000  00001752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000438  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019a  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002236  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	3d d0       	rcall	.+122    	; 0x114 <main>
  9a:	50 c1       	rjmp	.+672    	; 0x33c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <usart0_init>:

void tx0_str(unsigned char *str){
	while(*str){
		tx0_ch(*str++);
	}
}
  9e:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  a2:	89 b9       	out	0x09, r24	; 9
  a4:	88 e1       	ldi	r24, 0x18	; 24
  a6:	8a b9       	out	0x0a, r24	; 10
  a8:	08 95       	ret

000000aa <rx0_ch>:

char rx0_ch(){
	while(!(UCSR0A & (1<<RXC0)));
  aa:	5f 9b       	sbis	0x0b, 7	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <rx0_ch>
	return UDR0;
  ae:	8c b1       	in	r24, 0x0c	; 12
}
  b0:	08 95       	ret

000000b2 <mortor_set_speed>:
void mortor_set_speed(uint8_t duty) {
	if (duty > 255) duty = 255;
	OCR1B = ((uint32_t)ICR1 * (255-duty)) / 255;
  b2:	26 b5       	in	r18, 0x26	; 38
  b4:	37 b5       	in	r19, 0x27	; 39
  b6:	af ef       	ldi	r26, 0xFF	; 255
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	a8 1b       	sub	r26, r24
  bc:	b1 09       	sbc	r27, r1
  be:	38 d1       	rcall	.+624    	; 0x330 <__usmulhisi3>
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	02 d1       	rcall	.+516    	; 0x2ce <__udivmodsi4>
  ca:	39 bd       	out	0x29, r19	; 41
  cc:	28 bd       	out	0x28, r18	; 40
  ce:	08 95       	ret

000000d0 <servo_init>:
}

void servo_init() {
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
  d0:	82 ea       	ldi	r24, 0xA2	; 162
  d2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
  d4:	8a e1       	ldi	r24, 0x1A	; 26
  d6:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 40000;
  d8:	80 e4       	ldi	r24, 0x40	; 64
  da:	9c e9       	ldi	r25, 0x9C	; 156
  dc:	97 bd       	out	0x27, r25	; 39
  de:	86 bd       	out	0x26, r24	; 38

	DDRB |= (1 << PB5) | (1 << PB6);
  e0:	87 b3       	in	r24, 0x17	; 23
  e2:	80 66       	ori	r24, 0x60	; 96
  e4:	87 bb       	out	0x17, r24	; 23

	OCR1A = 0;  // 서보 초기값 (필요하면 1500 정도로 초기화 가능)
  e6:	1b bc       	out	0x2b, r1	; 43
  e8:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;  // 모터 초기 PWM 0 (멈춤)
  ea:	19 bc       	out	0x29, r1	; 41
  ec:	18 bc       	out	0x28, r1	; 40
  ee:	08 95       	ret

000000f0 <servo_set_angle>:
}
void servo_set_angle(uint8_t angle) {
	if (angle > 180) angle = 180;
  f0:	85 3b       	cpi	r24, 0xB5	; 181
  f2:	08 f0       	brcs	.+2      	; 0xf6 <servo_set_angle+0x6>
  f4:	84 eb       	ldi	r24, 0xB4	; 180
	uint16_t pulse = 2000 + ((uint32_t)angle * 4000) / 180;  // 1~2ms pulse
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	a0 ea       	ldi	r26, 0xA0	; 160
  fc:	bf e0       	ldi	r27, 0x0F	; 15
  fe:	09 d1       	rcall	.+530    	; 0x312 <__umulhisi3>
 100:	24 eb       	ldi	r18, 0xB4	; 180
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	e2 d0       	rcall	.+452    	; 0x2ce <__udivmodsi4>
 10a:	20 53       	subi	r18, 0x30	; 48
 10c:	38 4f       	sbci	r19, 0xF8	; 248
	OCR1A = pulse;
 10e:	3b bd       	out	0x2b, r19	; 43
 110:	2a bd       	out	0x2a, r18	; 42
 112:	08 95       	ret

00000114 <main>:
}


int main(void) {
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	64 97       	sbiw	r28, 0x14	; 20
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xff;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
 12c:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xff;
 12e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xff;
 130:	84 bb       	out	0x14, r24	; 20
	
	char received = "0";
	char str[20] = "";  // ✅ STR_SIZE 사용
 132:	1a 82       	std	Y+2, r1	; 0x02
 134:	19 82       	std	Y+1, r1	; 0x01
 136:	fe 01       	movw	r30, r28
 138:	33 96       	adiw	r30, 0x03	; 3
 13a:	82 e1       	ldi	r24, 0x12	; 18
 13c:	df 01       	movw	r26, r30
 13e:	1d 92       	st	X+, r1
 140:	8a 95       	dec	r24
 142:	e9 f7       	brne	.-6      	; 0x13e <main+0x2a>
	unsigned char idx = 0;
	servo_init();
 144:	c5 df       	rcall	.-118    	; 0xd0 <servo_init>
	usart0_init(103);
 146:	87 e6       	ldi	r24, 0x67	; 103
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	a9 df       	rcall	.-174    	; 0x9e <usart0_init>
	DDRD = 0xff;
	DDRC = 0xff;
	
	char received = "0";
	char str[20] = "";  // ✅ STR_SIZE 사용
	unsigned char idx = 0;
 14c:	10 e0       	ldi	r17, 0x00	; 0
	servo_init();
	usart0_init(103);
	while (1) {
		received = rx0_ch();
 14e:	ad df       	rcall	.-166    	; 0xaa <rx0_ch>
 150:	8a 30       	cpi	r24, 0x0A	; 10
		if (received == '\n' || received == '\r') {
 152:	19 f0       	breq	.+6      	; 0x15a <main+0x46>
 154:	8d 30       	cpi	r24, 0x0D	; 13
 156:	09 f0       	breq	.+2      	; 0x15a <main+0x46>
 158:	ae c0       	rjmp	.+348    	; 0x2b6 <main+0x1a2>
 15a:	e1 e0       	ldi	r30, 0x01	; 1
			str[idx] = '\0';     // 끝 표시
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ec 0f       	add	r30, r28
 160:	fd 1f       	adc	r31, r29
 162:	e1 0f       	add	r30, r17
 164:	f1 1d       	adc	r31, r1
 166:	10 82       	st	Z, r1
 168:	80 e0       	ldi	r24, 0x00	; 0

			
			for (int i = 0; i < 8; i++) {
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	24 c0       	rjmp	.+72     	; 0x1b6 <main+0xa2>
 16e:	e1 e0       	ldi	r30, 0x01	; 1
				if (str[i] == '0')
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	ec 0f       	add	r30, r28
 174:	fd 1f       	adc	r31, r29
 176:	e8 0f       	add	r30, r24
 178:	f9 1f       	adc	r31, r25
 17a:	20 81       	ld	r18, Z
 17c:	20 33       	cpi	r18, 0x30	; 48
 17e:	69 f4       	brne	.+26     	; 0x19a <main+0x86>
 180:	4b b3       	in	r20, 0x1b	; 27
				PORTA &= ~(1 << i);
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	08 2e       	mov	r0, r24
 188:	02 c0       	rjmp	.+4      	; 0x18e <main+0x7a>
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <main+0x76>
 192:	20 95       	com	r18
 194:	24 23       	and	r18, r20
 196:	2b bb       	out	0x1b, r18	; 27
 198:	0d c0       	rjmp	.+26     	; 0x1b4 <main+0xa0>
 19a:	21 33       	cpi	r18, 0x31	; 49
				else if (str[i] == '1')
 19c:	59 f4       	brne	.+22     	; 0x1b4 <main+0xa0>
 19e:	4b b3       	in	r20, 0x1b	; 27
				PORTA |= (1 << i);
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	08 2e       	mov	r0, r24
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <main+0x98>
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <main+0x94>
 1b0:	24 2b       	or	r18, r20
 1b2:	2b bb       	out	0x1b, r18	; 27
 1b4:	01 96       	adiw	r24, 0x01	; 1
		received = rx0_ch();
		if (received == '\n' || received == '\r') {
			str[idx] = '\0';     // 끝 표시

			
			for (int i = 0; i < 8; i++) {
 1b6:	88 30       	cpi	r24, 0x08	; 8
 1b8:	91 05       	cpc	r25, r1
 1ba:	cc f2       	brlt	.-78     	; 0x16e <main+0x5a>
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	26 c0       	rjmp	.+76     	; 0x20e <main+0xfa>
 1c2:	fc 01       	movw	r30, r24
				PORTA &= ~(1 << i);
				else if (str[i] == '1')
				PORTA |= (1 << i);
			}		
			for (int i = 0; i < 3; i++) {
				if (str[i + 8] == '0')
 1c4:	38 96       	adiw	r30, 0x08	; 8
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	2c 0f       	add	r18, r28
 1cc:	3d 1f       	adc	r19, r29
 1ce:	e2 0f       	add	r30, r18
 1d0:	f3 1f       	adc	r31, r19
 1d2:	20 81       	ld	r18, Z
 1d4:	20 33       	cpi	r18, 0x30	; 48
 1d6:	69 f4       	brne	.+26     	; 0x1f2 <main+0xde>
 1d8:	48 b3       	in	r20, 0x18	; 24
				PORTB &= ~(1 << i);
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	08 2e       	mov	r0, r24
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <main+0xd2>
 1e2:	22 0f       	add	r18, r18
 1e4:	33 1f       	adc	r19, r19
 1e6:	0a 94       	dec	r0
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <main+0xce>
 1ea:	20 95       	com	r18
 1ec:	24 23       	and	r18, r20
 1ee:	28 bb       	out	0x18, r18	; 24
 1f0:	0d c0       	rjmp	.+26     	; 0x20c <main+0xf8>
 1f2:	21 33       	cpi	r18, 0x31	; 49
				else if (str[i + 8] == '1')
 1f4:	59 f4       	brne	.+22     	; 0x20c <main+0xf8>
 1f6:	48 b3       	in	r20, 0x18	; 24
				PORTB |= (1 << i);
 1f8:	21 e0       	ldi	r18, 0x01	; 1
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	08 2e       	mov	r0, r24
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <main+0xf0>
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <main+0xec>
 208:	24 2b       	or	r18, r20
 20a:	28 bb       	out	0x18, r18	; 24
 20c:	01 96       	adiw	r24, 0x01	; 1
				if (str[i] == '0')
				PORTA &= ~(1 << i);
				else if (str[i] == '1')
				PORTA |= (1 << i);
			}		
			for (int i = 0; i < 3; i++) {
 20e:	83 30       	cpi	r24, 0x03	; 3
 210:	91 05       	cpc	r25, r1
 212:	bc f2       	brlt	.-82     	; 0x1c2 <main+0xae>
 214:	8c 85       	ldd	r24, Y+12	; 0x0c
				if (str[i + 8] == '0')
				PORTB &= ~(1 << i);
				else if (str[i + 8] == '1')
				PORTB |= (1 << i);
			}
			switch(str[11] - '0'){
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	c0 97       	sbiw	r24, 0x30	; 48
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	91 05       	cpc	r25, r1
 21e:	19 f0       	breq	.+6      	; 0x226 <main+0x112>
 220:	02 97       	sbiw	r24, 0x02	; 2
 222:	59 f0       	breq	.+22     	; 0x23a <main+0x126>
 224:	14 c0       	rjmp	.+40     	; 0x24e <main+0x13a>
 226:	85 b3       	in	r24, 0x15	; 21
				case 1:
					PORTC &= ~(1<<PC0);
 228:	8e 7f       	andi	r24, 0xFE	; 254
 22a:	85 bb       	out	0x15, r24	; 21
 22c:	85 b3       	in	r24, 0x15	; 21
					PORTC |= (1<<PC1);
 22e:	82 60       	ori	r24, 0x02	; 2
 230:	85 bb       	out	0x15, r24	; 21
 232:	85 b3       	in	r24, 0x15	; 21
					PORTC &= ~(1<<PC2);
 234:	8b 7f       	andi	r24, 0xFB	; 251
 236:	85 bb       	out	0x15, r24	; 21
 238:	13 c0       	rjmp	.+38     	; 0x260 <main+0x14c>
					break;
 23a:	85 b3       	in	r24, 0x15	; 21
				case 2:
					PORTC |= (1<<PC0);
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	85 bb       	out	0x15, r24	; 21
 240:	85 b3       	in	r24, 0x15	; 21
					PORTC &= ~(1<<PC1);
 242:	8d 7f       	andi	r24, 0xFD	; 253
 244:	85 bb       	out	0x15, r24	; 21
 246:	85 b3       	in	r24, 0x15	; 21
					PORTC &= ~(1<<PC2);
 248:	8b 7f       	andi	r24, 0xFB	; 251
 24a:	85 bb       	out	0x15, r24	; 21
 24c:	09 c0       	rjmp	.+18     	; 0x260 <main+0x14c>
					break;
 24e:	85 b3       	in	r24, 0x15	; 21
				default:
					PORTC &= ~(1<<PC0);
 250:	8e 7f       	andi	r24, 0xFE	; 254
 252:	85 bb       	out	0x15, r24	; 21
 254:	85 b3       	in	r24, 0x15	; 21
					PORTC &= ~(1<<PC1);
 256:	8d 7f       	andi	r24, 0xFD	; 253
 258:	85 bb       	out	0x15, r24	; 21
 25a:	85 b3       	in	r24, 0x15	; 21
					PORTC &= ~(1<<PC2);
 25c:	8b 7f       	andi	r24, 0xFB	; 251
 25e:	85 bb       	out	0x15, r24	; 21
 260:	8d 85       	ldd	r24, Y+13	; 0x0d
					break;
			}
			switch(str[12] - '0'){
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	c0 97       	sbiw	r24, 0x30	; 48
 266:	19 f0       	breq	.+6      	; 0x26e <main+0x15a>
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	21 f0       	breq	.+8      	; 0x274 <main+0x160>
 26c:	05 c0       	rjmp	.+10     	; 0x278 <main+0x164>
				case 0:
				servo_set_angle(0);
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	3f df       	rcall	.-386    	; 0xf0 <servo_set_angle>
				break;
 272:	02 c0       	rjmp	.+4      	; 0x278 <main+0x164>
				case 1:
				servo_set_angle(90);
 274:	8a e5       	ldi	r24, 0x5A	; 90
 276:	3c df       	rcall	.-392    	; 0xf0 <servo_set_angle>
 278:	8e 85       	ldd	r24, Y+14	; 0x0e
				break;
			}
			switch(str[13] - '0'){ // 모터 제어
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	c0 97       	sbiw	r24, 0x30	; 48
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	91 05       	cpc	r25, r1
 282:	41 f0       	breq	.+16     	; 0x294 <main+0x180>
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	91 05       	cpc	r25, r1
 288:	41 f0       	breq	.+16     	; 0x29a <main+0x186>
 28a:	89 2b       	or	r24, r25
 28c:	49 f4       	brne	.+18     	; 0x2a0 <main+0x18c>
				case 0:
				mortor_set_speed(0);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	10 df       	rcall	.-480    	; 0xb2 <mortor_set_speed>
				break;
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <main+0x190>
				case 1:
				mortor_set_speed(60);
 294:	8c e3       	ldi	r24, 0x3C	; 60
 296:	0d df       	rcall	.-486    	; 0xb2 <mortor_set_speed>
				break;
 298:	05 c0       	rjmp	.+10     	; 0x2a4 <main+0x190>
				case 2:
				mortor_set_speed(90);
 29a:	8a e5       	ldi	r24, 0x5A	; 90
 29c:	0a df       	rcall	.-492    	; 0xb2 <mortor_set_speed>
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <main+0x190>
				break;
 2a0:	88 e7       	ldi	r24, 0x78	; 120
				default:
				mortor_set_speed(120);
 2a2:	07 df       	rcall	.-498    	; 0xb2 <mortor_set_speed>
 2a4:	fe 01       	movw	r30, r28
 2a6:	31 96       	adiw	r30, 0x01	; 1
				break;
			}

			idx = 0;
			memset(str, 0, 20);
 2a8:	84 e1       	ldi	r24, 0x14	; 20
 2aa:	df 01       	movw	r26, r30
 2ac:	1d 92       	st	X+, r1
 2ae:	8a 95       	dec	r24
 2b0:	e9 f7       	brne	.-6      	; 0x2ac <main+0x198>
 2b2:	10 e0       	ldi	r17, 0x00	; 0
 2b4:	4c cf       	rjmp	.-360    	; 0x14e <main+0x3a>
				default:
				mortor_set_speed(120);
				break;
			}

			idx = 0;
 2b6:	13 31       	cpi	r17, 0x13	; 19
			memset(str, 0, 20);
 2b8:	08 f0       	brcs	.+2      	; 0x2bc <main+0x1a8>
		}
		else if (idx < 20 - 1) {
 2ba:	49 cf       	rjmp	.-366    	; 0x14e <main+0x3a>
 2bc:	e1 e0       	ldi	r30, 0x01	; 1
 2be:	f0 e0       	ldi	r31, 0x00	; 0
			str[idx++] = received;
 2c0:	ec 0f       	add	r30, r28
 2c2:	fd 1f       	adc	r31, r29
 2c4:	e1 0f       	add	r30, r17
 2c6:	f1 1d       	adc	r31, r1
 2c8:	80 83       	st	Z, r24
 2ca:	1f 5f       	subi	r17, 0xFF	; 255
 2cc:	40 cf       	rjmp	.-384    	; 0x14e <main+0x3a>

000002ce <__udivmodsi4>:
 2ce:	a1 e2       	ldi	r26, 0x21	; 33
 2d0:	1a 2e       	mov	r1, r26
 2d2:	aa 1b       	sub	r26, r26
 2d4:	bb 1b       	sub	r27, r27
 2d6:	fd 01       	movw	r30, r26
 2d8:	0d c0       	rjmp	.+26     	; 0x2f4 <__udivmodsi4_ep>

000002da <__udivmodsi4_loop>:
 2da:	aa 1f       	adc	r26, r26
 2dc:	bb 1f       	adc	r27, r27
 2de:	ee 1f       	adc	r30, r30
 2e0:	ff 1f       	adc	r31, r31
 2e2:	a2 17       	cp	r26, r18
 2e4:	b3 07       	cpc	r27, r19
 2e6:	e4 07       	cpc	r30, r20
 2e8:	f5 07       	cpc	r31, r21
 2ea:	20 f0       	brcs	.+8      	; 0x2f4 <__udivmodsi4_ep>
 2ec:	a2 1b       	sub	r26, r18
 2ee:	b3 0b       	sbc	r27, r19
 2f0:	e4 0b       	sbc	r30, r20
 2f2:	f5 0b       	sbc	r31, r21

000002f4 <__udivmodsi4_ep>:
 2f4:	66 1f       	adc	r22, r22
 2f6:	77 1f       	adc	r23, r23
 2f8:	88 1f       	adc	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	1a 94       	dec	r1
 2fe:	69 f7       	brne	.-38     	; 0x2da <__udivmodsi4_loop>
 300:	60 95       	com	r22
 302:	70 95       	com	r23
 304:	80 95       	com	r24
 306:	90 95       	com	r25
 308:	9b 01       	movw	r18, r22
 30a:	ac 01       	movw	r20, r24
 30c:	bd 01       	movw	r22, r26
 30e:	cf 01       	movw	r24, r30
 310:	08 95       	ret

00000312 <__umulhisi3>:
 312:	a2 9f       	mul	r26, r18
 314:	b0 01       	movw	r22, r0
 316:	b3 9f       	mul	r27, r19
 318:	c0 01       	movw	r24, r0
 31a:	a3 9f       	mul	r26, r19
 31c:	70 0d       	add	r23, r0
 31e:	81 1d       	adc	r24, r1
 320:	11 24       	eor	r1, r1
 322:	91 1d       	adc	r25, r1
 324:	b2 9f       	mul	r27, r18
 326:	70 0d       	add	r23, r0
 328:	81 1d       	adc	r24, r1
 32a:	11 24       	eor	r1, r1
 32c:	91 1d       	adc	r25, r1
 32e:	08 95       	ret

00000330 <__usmulhisi3>:
 330:	f0 df       	rcall	.-32     	; 0x312 <__umulhisi3>

00000332 <__usmulhisi3_tail>:
 332:	b7 ff       	sbrs	r27, 7
 334:	08 95       	ret
 336:	82 1b       	sub	r24, r18
 338:	93 0b       	sbc	r25, r19
 33a:	08 95       	ret

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
